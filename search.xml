<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog部署</title>
    <url>/2022/10/05/blog%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>第一次自己建博客，操作不够熟练，此贴记录踩坑历程和常用操作。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g </span><br><span class="line"><span class="comment">#hexo generate的简写</span></span><br><span class="line"><span class="comment">#生成静态文件</span></span><br></pre></td></tr></table></figure>

<h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line"><span class="comment">#hexo server的简写</span></span><br><span class="line"><span class="comment">#默认使用4000端口</span></span><br></pre></td></tr></table></figure>

<h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"><span class="comment">#防止更新没更新上</span></span><br></pre></td></tr></table></figure>

<h3 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br><span class="line"><span class="comment">#hexo deploy的简写</span></span><br><span class="line"><span class="comment">#部署到github</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要<code>hexo g</code>先生成静态文件</p>
</blockquote>
<h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment">#使用typora编辑文章</span></span><br></pre></td></tr></table></figure>

<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new draft &quot;xxx&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要使用<code>hexo new publish &quot;xxx&quot;</code>使其发布成功</p>
</blockquote>
<h2 id="图片配置"><a href="#图片配置" class="headerlink" title="图片配置"></a>图片配置</h2><h3 id="本地方式"><a href="#本地方式" class="headerlink" title="本地方式"></a>本地方式</h3><p>本来以为直接使用本地图片就可以上传到博客上，甚至配置了<code>hexo-asset-image</code>。</p>
<p>然而，生成一个<code>md</code>文件就要生成一个相应文件夹实在离谱，文章一多岂不是都是文件夹？而且，<code>--- ---</code>中间如果要配置<code>cover</code>或<code>top_img</code>无法使用<code>markdown</code>，只能用<code>https</code>方式，那么本地链接也无法使用了。</p>
<p>唯一的方法便是使用图床功能，可以使用<code>gitee</code>或者<code>阿里云OSS</code>。</p>
<p><code>gitee</code>曾经崩过一次，而且注册需要身份证和手持身份证照片，担心隐私安全问题，暂时放弃。</p>
<h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><p>阿里云对象存储<code>OSS（Object Storage Service）</code>比较适合存储静态资源，缺点是需要一些小钱，配置比<code>gitee</code>麻烦不少，但是一劳永逸。</p>
<h4 id="设置OSS"><a href="#设置OSS" class="headerlink" title="设置OSS"></a>设置OSS</h4><p>鉴于blog不需要太多的存储空间，本次就买了最低级的OSS，只需要27块，就能有三年的服务器权限。</p>
<p><img src="https://cosh-blog.oss-cn-beijing.aliyuncs.com/blog/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E8%B4%AD%E4%B9%B0.png"></p>
<p><code>bucket</code>在我看来相当于一个命名空间，使用存储服务时需要我们指定分区进行存储。这个id是全网唯一的，不能和别人重复。</p>
<p><img src="https://cosh-blog.oss-cn-beijing.aliyuncs.com/blog/%E6%96%B0%E5%BB%BAbucket.png"></p>
<h4 id="PicGo图床上传服务"><a href="#PicGo图床上传服务" class="headerlink" title="PicGo图床上传服务"></a>PicGo图床上传服务</h4><p>每次传输到云端太麻烦了，直接使用PicGo简化流程，只需要完善好配置。</p>
<p><img src="https://cosh-blog.oss-cn-beijing.aliyuncs.com/blog/PicGo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE.png"></p>
<ol>
<li><code>keyId</code>和<code>KeySecret</code>在个人的<code>AccessKey</code>管理中直接生成就可以，他推荐我用子账号比较安全，我没管。</li>
<li><code>Bucket</code>就是OSS中设置的空间名</li>
<li>存储区域就是路径拉~</li>
</ol>
<h4 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h4><p>前两项配置使得我们能够从<code>PicGo</code>上传图片，然后获取链接，写入<code>Typora</code>。将<code>Typora</code>配置好可以直接在使用<code>MarkDown</code>写作时直接上传本地图片。</p>
<p>完成<code>Typora</code>上传服务的配置就可以了。</p>
<p><img src="https://cosh-blog.oss-cn-beijing.aliyuncs.com/blog/typora%E8%AE%BE%E7%BD%AEpicGo.png"></p>
<p><strong>自此，博客的图片可以不使用本地功能，全部来自网络。</strong></p>
<h2 id="音乐配置"><a href="#音乐配置" class="headerlink" title="音乐配置"></a>音乐配置</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>首先下载hexo-tag-aplayer插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-aplayer</span><br><span class="line"><span class="comment">#比播放器外链更稳定，配置好很香</span></span><br></pre></td></tr></table></figure>

<h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>全局修改，防止插入重复资源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这部分hexo配置没有，需要主动写入</p>
</blockquote>
<p>主题部分修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="插入底部音乐"><a href="#插入底部音乐" class="headerlink" title="插入底部音乐"></a>插入底部音乐</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;60198&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-autoplay=&quot;true&quot;&gt;</span> <span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>server</code>设置为网易云音乐</li>
<li><code>data-id</code>可通过歌单分享链接获得</li>
</ul>
<blockquote>
<p>如果想要切换页面，音乐不中断，<code>pjax</code>设为<code>true</code></p>
</blockquote>
<h2 id="评论区配置"><a href="#评论区配置" class="headerlink" title="评论区配置"></a>评论区配置</h2><h3 id="LearnCloud注册"><a href="#LearnCloud注册" class="headerlink" title="LearnCloud注册"></a>LearnCloud注册</h3><p><code>butterfly</code>支持使用多种评论插件，我选择了<code>valine</code>。使用<code>valine</code>需要将评论数据上传到<code>LearnCloud</code>。那就注册一个吧。</p>
<p><img src="https://cosh-blog.oss-cn-beijing.aliyuncs.com/blog/LearnCloud%E5%88%9B%E5%BB%BA.png"></p>
<h3 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="comment"># leancloud application app id</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="comment"># leancloud application app key</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span></span><br><span class="line">  <span class="attr">bg:</span> <span class="comment"># valine background</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>appId</code>与<code>appKey</code>为<code>LearnCloud</code>生成的，需要写入配置文件</p>
</blockquote>
<p>这是全局生成的配置，如果需要对单独的博客内容关闭该功能，只需要在<code>page_head</code>中修改：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p>自己加了两个评论，假装有人评论过吧。</p>
<p><img src="https://cosh-blog.oss-cn-beijing.aliyuncs.com/blog/%E8%AF%84%E8%AE%BA%E5%8C%BA%E7%95%8C%E9%9D%A2.png"></p>
<p>数据库界面如下：</p>
<p><img src="https://cosh-blog.oss-cn-beijing.aliyuncs.com/blog/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%95%8C%E9%9D%A2.png"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java语法技巧</title>
    <url>/2022/10/11/java%E8%AF%AD%E6%B3%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合转数组"><a href="#集合转数组" class="headerlink" title="集合转数组"></a>集合转数组</h3><p>二维int数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[list.size()][]);</span><br></pre></td></tr></table></figure>

<p>一维int数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//toArray()不能用基础类型</span></span><br><span class="line"><span class="comment">//1、一个一个放(不推荐)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer num : list) &#123;</span><br><span class="line">        res[i++] = num;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(res));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、JAVA8的stream</span></span><br><span class="line"><span class="type">int</span>[] res = list.stream().mapToInt(Integer::intValue).toArray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、toArray()转成Integer[]再转int[]</span></span><br><span class="line">Integer[] integers = list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[list.size()]);</span><br><span class="line">        <span class="type">int</span>[] res = Arrays.stream(integers).mapToInt(Integer::valueOf).toArray();</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数位dp</title>
    <url>/2022/10/18/%E6%95%B0%E4%BD%8Ddp/</url>
    <content><![CDATA[<h2 id="数位dp"><a href="#数位dp" class="headerlink" title="数位dp"></a>数位dp</h2><h3 id="902-最大为N的数字组合"><a href="#902-最大为N的数字组合" class="headerlink" title="902.最大为N的数字组合"></a>902.最大为N的数字组合</h3><p>网页链接</p>
<p><a href="https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/">原题链接</a></p>
<p><code>isNum</code>前一位是否是数组（避免有前导0的情况）</p>
<p><code>isLimit</code>此次遍历是否有限制，决定下一位数字的上限以及<code>dp</code>的记录</p>
<p><code>dp</code>无限制的数位值直接加入答案，不需要重新递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String digits[];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span>[] c;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> dp[];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">atMostNGivenDigitSet</span><span class="params">(String[] digits, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.digits = digits;</span><br><span class="line">        c = String.valueOf(n).toCharArray();</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">int</span>[c.length];</span><br><span class="line">        Arrays.fill(dp,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i,<span class="type">boolean</span> isLimit,<span class="type">boolean</span> isNum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == c.length) <span class="keyword">return</span> isNum ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit &amp;&amp; isNum &amp;&amp; dp[i] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isNum)&#123;</span><br><span class="line">            res += dfs(i + <span class="number">1</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> <span class="variable">up</span> <span class="operator">=</span> isLimit ? c[i] : <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(String s : digits)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) &gt; up) <span class="keyword">break</span>;</span><br><span class="line">            res += dfs(i + <span class="number">1</span>,isLimit &amp;&amp; s.charAt(<span class="number">0</span>) == up,<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit &amp;&amp; isNum) dp[i] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="233-数字1的个数"><a href="#233-数字1的个数" class="headerlink" title="233.数字1的个数"></a>233.数字1的个数</h3><p><a href="https://leetcode.cn/problems/number-of-digit-one/">原题链接</a></p>
<p><code>isNum</code>是否为数组</p>
<p><code>cnt1</code>计算前缀1的个数，传到下一次递归。是比前一题多出来的参数，因为前一题到最后才能知道是否符合，而本题从第一位有1开始就要计算个数。</p>
<p><code>dp[i][cnt1]</code>在前缀1个数为<code>cnt1</code>的情况下，第<code>i</code>个数记录的res，记忆化搜索。</p>
<p><code>isNum</code>可以写也可以不写，因为前缀与结果没有影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">char</span> c[];</span><br><span class="line">    <span class="type">int</span> dp[][];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countDigitOne</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        c = String.valueOf(n).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> c.length;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="literal">true</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i,<span class="type">boolean</span> isLimit,<span class="type">int</span> cnt1)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == c.length) <span class="keyword">return</span> cnt1;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit &amp;&amp; dp[i][cnt1] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[i][cnt1];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">up</span> <span class="operator">=</span> isLimit ? c[i] : <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;s &lt;= up;s++)&#123;</span><br><span class="line">            res += dfs(i + <span class="number">1</span>,isLimit &amp;&amp; s == up,cnt1 + (s == <span class="string">&#x27;1&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit) dp[i][cnt1] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="面试题17-06-2出现的次数"><a href="#面试题17-06-2出现的次数" class="headerlink" title="面试题17.06 2出现的次数"></a>面试题17.06 2出现的次数</h3><p><a href="https://leetcode.cn/problems/number-of-2s-in-range-lcci/">原题链接</a></p>
<p>同223题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> dp[][];</span><br><span class="line">    <span class="type">char</span> c[];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOf2sInRange</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        c = String.valueOf(n).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> c.length;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="literal">true</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cnt1,<span class="type">boolean</span> isLimit,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == c.length) <span class="keyword">return</span> cnt1;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit &amp;&amp; dp[i][cnt1] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[i][cnt1];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">up</span> <span class="operator">=</span> isLimit ? c[i] : <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;s &lt;= up;s++)&#123;</span><br><span class="line">            res += dfs(cnt1 + (s == <span class="string">&#x27;2&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>),isLimit &amp;&amp; s == up,i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit) dp[i][cnt1] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="600-不含连续1的非负整数"><a href="#600-不含连续1的非负整数" class="headerlink" title="600.不含连续1的非负整数"></a>600.不含连续1的非负整数</h3><p><a href="https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/">原题链接</a></p>
<p><code>isNum</code>是否为数组</p>
<p><code>cnt1</code>记录前缀是否为1。</p>
<p><code>dp[i][cnt1]</code>在前缀0或1的情况下，第<code>i</code>个数记录的res，记忆化搜索。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">char</span> c[];</span><br><span class="line">    <span class="type">int</span> [][]dp;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findIntegers</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        c = Integer.toBinaryString(n).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> c.length;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i,<span class="type">boolean</span> pre1,<span class="type">boolean</span> isLimit)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == c.length) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit &amp;&amp; dp[i][pre1 ? <span class="number">1</span> : <span class="number">0</span>] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[i][pre1 ? <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">up</span> <span class="operator">=</span> isLimit ? c[i] : <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        res += dfs(i + <span class="number">1</span>,<span class="literal">false</span>,isLimit &amp;&amp; <span class="string">&#x27;0&#x27;</span> == up);</span><br><span class="line">        <span class="keyword">if</span>(!pre1 &amp;&amp; up == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            res += dfs(i + <span class="number">1</span>,<span class="literal">true</span>,isLimit);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit) dp[i][pre1 ? <span class="number">1</span> : <span class="number">0</span>] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1012-至少有1位重复的数字"><a href="#1012-至少有1位重复的数字" class="headerlink" title="1012.至少有1位重复的数字"></a>1012.至少有1位重复的数字</h3><p><a href="https://leetcode.cn/problems/numbers-with-repeated-digits/">原题链接</a></p>
<p><code>isNum</code>需要，因为有前导0依旧需要计算。上面不需要是因为计数时无前导0。</p>
<p><code>dp[i][mask]</code>中的mask指前面是否有相同的数，没有则向下递归。</p>
<p>最后用n减去没有重复的数字~。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> dp[][];</span><br><span class="line">    <span class="type">char</span> c[];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDupDigitsAtMostN</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        c = String.valueOf(n).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> c.length;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">1</span> &lt;&lt; <span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> mask,<span class="type">boolean</span> isLimit,<span class="type">boolean</span> isNum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == c.length) <span class="keyword">return</span> isNum ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit &amp;&amp; isNum &amp;&amp; dp[i][mask] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[i][mask];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isNum)&#123;</span><br><span class="line">            res += dfs(i + <span class="number">1</span>,mask,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">char</span> <span class="variable">up</span> <span class="operator">=</span> isLimit ? c[i] : <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> <span class="variable">s</span> <span class="operator">=</span> isNum ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;1&#x27;</span>;s &lt;= up;s++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((mask &gt;&gt; (s - <span class="string">&#x27;0&#x27;</span>) &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                res += dfs(i + <span class="number">1</span>,mask | (<span class="number">1</span> &lt;&lt; (s - <span class="string">&#x27;0&#x27;</span>)),isLimit &amp;&amp; s == up,<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isLimit &amp;&amp; isNum) dp[i][mask] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于灵神的数位dp模板来说，一共有四个参数比较关键。</p>
<p><code>i</code>用于表示数位。</p>
<p><code>isLimit</code>表示是否有限制，到达<code>up</code>或者上一层为限制的话该参数为<code>true</code>。</p>
<p><code>isNum</code>为前面是否有数字。这个就比较灵性，对于<strong>计算数字出现次数</strong>时不需要，因为前面有才会算上，没有算不上。而如果要计算<strong>前面有数</strong>一类的题就要加上，有前导0和无前导0是两种计算结果。</p>
<p><code>mask</code>、<code>cnt1</code>等都起到一个计数和传递值的作用，因为后面的数与前面的数有关，无关则不需要。</p>
<p><code>dp</code>用以记忆化，基本都是本层的i和上层的值组成二维数组，若与上层无关，例如<strong>902</strong>，则为一维数组。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>图论</title>
    <url>/2022/10/21/%E5%9B%BE%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="邻接表方法"><a href="#邻接表方法" class="headerlink" title="邻接表方法"></a>邻接表方法</h3><p>也叫作，<strong>链式前向星存图</strong>。N为提供的点的个数，M为边的个数。非链式前向星存图方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> []he = <span class="keyword">new</span> <span class="title class_">int</span>[N],e = <span class="keyword">new</span> <span class="title class_">int</span>[M],ne = <span class="keyword">new</span> <span class="title class_">int</span>[M],w = <span class="keyword">new</span> <span class="title class_">int</span>[M];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = he[a];</span><br><span class="line">    he[a] = idx;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>he</code>看作<code>head edge</code>表示头结点</p>
<p><code>e</code>就是<code>edge</code>表示头结点的下一个点</p>
<p><code>ne</code>作为<code>next edge</code>存储上一条边的位置，反向查找就是下一个</p>
<p><code>w</code>为权重，看题目要求</p>
<p>该方法查找的是一个点延伸出去的多条边，<code>ne</code>为前项查找的必要存储，<code>e</code>与<code>w</code>为存储的信息。</p>
<p>遍历方式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> he[index];i != -<span class="number">1</span>;i = ne[i])&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>举例:(2,1)、(2,3)、(2,4)、(4,5)、(4,6)</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">e</td>
<td>1</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td align="center">ne</td>
<td>-1</td>
<td>0</td>
<td>1</td>
<td>-1</td>
<td>3</td>
</tr>
<tr>
<td align="center">he</td>
<td>-1</td>
<td>-1</td>
<td>2</td>
<td>-1</td>
<td>4</td>
</tr>
</tbody></table>
<h3 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207.课程表"></a>207.课程表</h3><p><a href="https://leetcode.cn/problems/course-schedule/?favorite=2cktkvj">原题链接</a></p>
<p>想要先学a，再学b，即a -&gt; b。只有b的入度为0，那么b才可以学。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100001</span>,M = <span class="number">5001</span>;</span><br><span class="line">    <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[M],ne = <span class="keyword">new</span> <span class="title class_">int</span>[M],he = <span class="keyword">new</span> <span class="title class_">int</span>[N],ci = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = he[a];</span><br><span class="line">        he[a] = idx;</span><br><span class="line">        ci[b]++;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFinish</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> &#123;</span><br><span class="line">        Arrays.fill(he,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> [] prerequisite : prerequisites)&#123;</span><br><span class="line">            add(prerequisite[<span class="number">0</span>],prerequisite[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; numCourses;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ci[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                deque.addLast(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> he[index];i != -<span class="number">1</span>;i = ne[i])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">                <span class="keyword">if</span>(--ci[j] == <span class="number">0</span>) deque.addLast(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == numCourses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="802-找到最终的安全状态"><a href="#802-找到最终的安全状态" class="headerlink" title="802. 找到最终的安全状态"></a>802. 找到最终的安全状态</h3><p><a href="https://leetcode.cn/problems/find-eventual-safe-states/">原题链接</a></p>
<p>和207一样，但是需要反向拓扑的入度为0时满足条件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10001</span>,M = <span class="number">40001</span>;</span><br><span class="line">    <span class="type">int</span> []e = <span class="keyword">new</span> <span class="title class_">int</span>[M],ne = <span class="keyword">new</span> <span class="title class_">int</span>[M],he = <span class="keyword">new</span> <span class="title class_">int</span>[N],id = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = he[a];</span><br><span class="line">        he[a] = idx;</span><br><span class="line">        id[b]++;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">eventualSafeNodes</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph.length;</span><br><span class="line">        Arrays.fill(he,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> num : graph[i])&#123;</span><br><span class="line">                add(num,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(id[i] == <span class="number">0</span>) deque.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> he[index];i != -<span class="number">1</span>;i = ne[i])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">edge</span> <span class="operator">=</span> e[i];</span><br><span class="line">                <span class="keyword">if</span>(--id[edge] == <span class="number">0</span>) deque.add(edge);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(id[i] == <span class="number">0</span>) res.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="886-可能的二分法（dfs）"><a href="#886-可能的二分法（dfs）" class="headerlink" title="886.可能的二分法（dfs）"></a>886.可能的二分法（dfs）</h3><p><a href="https://leetcode.cn/problems/possible-bipartition/">原题链接</a></p>
<p>这个是分两类，使用染色法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">2001</span>,M = <span class="number">20001</span>;</span><br><span class="line">    <span class="type">int</span> []he = <span class="keyword">new</span> <span class="title class_">int</span>[N],e = <span class="keyword">new</span> <span class="title class_">int</span>[M],ne = <span class="keyword">new</span> <span class="title class_">int</span>[M],color = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        e[idx] = b;</span><br><span class="line">        ne[idx] = he[a];</span><br><span class="line">        he[a] = idx;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> index,<span class="type">int</span> cur)</span>&#123;</span><br><span class="line">        color[index] = cur;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> he[index];i != -<span class="number">1</span>;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> e[i];</span><br><span class="line">            <span class="keyword">if</span>(color[j] == cur) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(color[j] == <span class="number">0</span> &amp;&amp; !dfs(j,<span class="number">3</span> - cur)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">possibleBipartition</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] dislikes)</span> &#123;</span><br><span class="line">        Arrays.fill(he,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] dislike : dislikes)&#123;</span><br><span class="line">            add(dislike[<span class="number">0</span>],dislike[<span class="number">1</span>]);</span><br><span class="line">            add(dislike[<span class="number">1</span>],dislike[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(color[i] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(i,<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="743-网络延迟时间"><a href="#743-网络延迟时间" class="headerlink" title="743.网络延迟时间"></a>743.网络延迟时间</h3><p><a href="https://leetcode.cn/problems/network-delay-time/">原题链接</a></p>
<p>使用<code>w[][]</code>储存邻接矩阵，初始化为<code>INF / 2</code>。而后每次循环一个点，先计算此次循环最短值。而后计算用此最短值遍历图后的新的每个点的最小值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">networkDelayTime</span><span class="params">(<span class="type">int</span>[][] times, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> w[][] = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> dis[] = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> Integer.MAX_VALUE / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.fill(dis,INF);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">                    w[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    w[i][j] = INF;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= times.length;i++)&#123;</span><br><span class="line">            w[times[i - <span class="number">1</span>][<span class="number">0</span>]][times[i - <span class="number">1</span>][<span class="number">1</span>]] = times[i - <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> vis[] = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        dis[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[j] &amp;&amp; (p == -<span class="number">1</span> || dis[j] &lt; dis[p]))&#123;</span><br><span class="line">                    p = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">                dis[j] = Math.min(dis[j],dis[p] + w[p][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            max = Math.max(max,dis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max == INF ? -<span class="number">1</span> : max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2022/10/25/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="十大排序算法"><a href="#十大排序算法" class="headerlink" title="十大排序算法"></a>十大排序算法</h2><h3 id="3、归并排序"><a href="#3、归并排序" class="headerlink" title="3、归并排序"></a>3、归并排序</h3><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>采用分治的思想。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> []arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    mergeSort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> left,<span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(nums,left,mid);</span><br><span class="line">        mergeSort(nums,mid + <span class="number">1</span>,right);</span><br><span class="line">        merge(nums,left,mid,right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="type">int</span> temp[] = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= mid &amp;&amp; r &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[l] &lt;= nums[r])&#123;</span><br><span class="line">            temp[i] = nums[l];</span><br><span class="line">            l++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp[i] = nums[r];</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= mid)&#123;</span><br><span class="line">        temp[i++] = nums[l++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(r &lt;= right)&#123;</span><br><span class="line">        temp[i++] = nums[r++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt;= right - left;j++)&#123;</span><br><span class="line">        nums[j + left] = temp[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="剑指offer51-数组中的逆序对"><a href="#剑指offer51-数组中的逆序对" class="headerlink" title="剑指offer51.数组中的逆序对"></a>剑指offer51.数组中的逆序对</h4><p><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">原题链接</a></p>
<p>每次合并的时候多一个计算次数的过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reversePairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        mergeSort(nums,<span class="number">0</span>,nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(nums,left,mid);</span><br><span class="line">            mergeSort(nums,mid + <span class="number">1</span>,right);</span><br><span class="line">            merge(nums,left,mid,right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="type">int</span> []temp = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= mid &amp;&amp; r &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l] &lt;= nums[r])&#123;</span><br><span class="line">                temp[begin++] = nums[l++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count += mid - l + <span class="number">1</span>;</span><br><span class="line">                temp[begin++] = nums[r++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l &lt;= mid) temp[begin++] = nums[l++];</span><br><span class="line">        <span class="keyword">while</span>(r &lt;= right) temp[begin++] = nums[r++];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt;= right - left;i++)&#123;</span><br><span class="line">            nums[i + left] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="148-链表排序（自顶向下"><a href="#148-链表排序（自顶向下" class="headerlink" title="148.链表排序（自顶向下)"></a>148.链表排序（自顶向下)</h4><p><a href="https://leetcode.cn/problems/sort-list/">原题链接</a></p>
<p>空间复杂度为<code>O(logn)</code>，空间复杂度<code>O(1)</code>需要自底向上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(head,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeSort</span><span class="params">(ListNode head,ListNode tail)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">if</span>(head.next == tail)&#123;</span><br><span class="line">            head.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head,slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != tail)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span>(fast != tail)&#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> slow;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> mergeSort(head,mid);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l2</span> <span class="operator">=</span> mergeSort(mid,tail);</span><br><span class="line">        <span class="keyword">return</span> merge(l1,l2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">merge</span><span class="params">(ListNode head1,ListNode head2)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> dummyHead,temp1 = head1,temp2 = head2;</span><br><span class="line">        <span class="keyword">while</span>(temp1 != <span class="literal">null</span> &amp;&amp; temp2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp1.val &lt;= temp2.val)&#123;</span><br><span class="line">                temp.next = temp1;</span><br><span class="line">                temp1 = temp1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp.next = temp2;</span><br><span class="line">                temp2 = temp2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp.next = temp1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp.next = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、快速排序"><a href="#4、快速排序" class="headerlink" title="4、快速排序"></a>4、快速排序</h3><h4 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int []nums = new int[]&#123;3,2,3,1,2,4,5,5,6&#125;;</span><br><span class="line">        quickSort(nums,0,nums.length - 1);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void quickSort(int[] nums,int l,int r)&#123;</span><br><span class="line">        if(l &gt; r) return ;</span><br><span class="line">        int i = l,j = r,temp = nums[l];</span><br><span class="line">        while(i &lt; j)&#123;</span><br><span class="line">            while (i &lt; j &amp;&amp; nums[j] &gt;= temp) j--;</span><br><span class="line">            while (i &lt; j &amp;&amp; nums[i] &lt;= temp) i++;</span><br><span class="line">            if(i &lt; j)&#123;</span><br><span class="line">                int mid = nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[l] = nums[i];</span><br><span class="line">        nums[i] = temp;</span><br><span class="line">        quickSort(nums,l,i - 1);</span><br><span class="line">        quickSort(nums,i + 1,r);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="215-数组中的最大元素-复杂度O-n"><a href="#215-数组中的最大元素-复杂度O-n" class="headerlink" title="215.数组中的最大元素(复杂度O(n))"></a>215.数组中的最大元素(复杂度O(n))</h4><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">原题链接</a></p>
<p>快速选择算法，不需要排序，选取基准值后类似二分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">       <span class="keyword">return</span> quickSelect(nums,<span class="number">0</span>,n - <span class="number">1</span>,n - k);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">quickSelect</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(l == r) <span class="keyword">return</span> nums[k];</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l - <span class="number">1</span>,j = r + <span class="number">1</span>,pivot = nums[l];</span><br><span class="line">       <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">           <span class="keyword">while</span>(nums[++i] &lt; pivot);</span><br><span class="line">           <span class="keyword">while</span>(nums[--j] &gt; pivot);</span><br><span class="line">           <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">               nums[i] = nums[j];</span><br><span class="line">               nums[j] = temp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(k &lt;= j) <span class="keyword">return</span> quickSelect(nums,l,j,k);</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">return</span> quickSelect(nums,j + <span class="number">1</span>,r,k);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="剑指Offer40-最小的k个数"><a href="#剑指Offer40-最小的k个数" class="headerlink" title="剑指Offer40.最小的k个数"></a>剑指Offer40.最小的k个数</h4><p><a href="https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/">原题链接</a></p>
<p>如果顺利的话（k &lt; 基准值索引）另一半就不需要排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] getLeastNumbers(<span class="type">int</span>[] arr, <span class="type">int</span> k) &#123;</span><br><span class="line">       <span class="keyword">return</span> quickSort(arr,k,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span>[] quickSort(<span class="type">int</span>[] arr,<span class="type">int</span> k,<span class="type">int</span> left ,<span class="type">int</span> right)&#123;</span><br><span class="line">       <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">       <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right;</span><br><span class="line">       <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">       <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">           <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j] &gt;= temp) j--;</span><br><span class="line">           <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= temp) i++;</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> arr[i];</span><br><span class="line">           arr[i] = arr[j];</span><br><span class="line">           arr[j] = num;</span><br><span class="line">       &#125;</span><br><span class="line">       arr[left] = arr[i];</span><br><span class="line">       arr[i] = temp;</span><br><span class="line">       <span class="keyword">if</span>(i &gt; k) quickSort(arr,k,left,i - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span>(i &lt; k) quickSort(arr,k,i + <span class="number">1</span>,right);</span><br><span class="line">       <span class="keyword">return</span> Arrays.copyOf(arr,k);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
